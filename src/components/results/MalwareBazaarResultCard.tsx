import React, { useState } from 'react';
import { IOCAnalysisResult } from '@/types/ioc';
import { getIOCTypeLabel } from '@/utils/ioc-detector';
import {
  AlertCircle,
  AlertTriangle,
  CheckCircle,
  XCircle,
  Info,
  Shield,
  FileText,
  Clock,
  Tag,
  Globe,
  Download,
  Upload,
  Award,
} from 'lucide-react';
import './MalwareBazaarResultCard.css';

interface MalwareBazaarResultCardProps {
  result: IOCAnalysisResult;
}

interface Sample {
  sha256: string;
  sha1: string;
  md5: string;
  fileName: string;
  fileSize: number;
  fileType: string;
  fileMime: string;
  signature?: string;
  firstSeen: string;
  lastSeen: string;
  reporter: string;
  originCountry: string;
  deliveryMethod?: string;
  deliveryMethodLabel: string;
  tags: string[];
  tagLabels: string[];
  comment?: string;
  intelligence?: {
    clamav?: string[];
    downloads: number;
    uploads: number;
  };
  codeSign?: any[];
}

export const MalwareBazaarResultCard: React.FC<MalwareBazaarResultCardProps> = ({ result }) => {
  const [activeTab, setActiveTab] = useState<'overview' | 'samples' | 'details'>('overview');

  const { details } = result;

  const totalSamples = details?.totalSamples || 0;
  const found = details?.found || false;
  const uniqueSignatures = details?.uniqueSignatures || [];
  const tags = details?.tags || [];

  // Get status info
  const getStatusInfo = () => {
    if (!found) {
      return {
        icon: <CheckCircle size={20} />,
        label: 'Clean',
        className: 'clean',
        description: 'No malware samples found for this hash in MalwareBazaar database'
      };
    }

    if (totalSamples > 0) {
      return {
        icon: <XCircle size={20} />,
        label: 'Malicious',
        className: 'malicious',
        description: `Found ${totalSamples} malware sample(s) matching this hash in MalwareBazaar database`
      };
    }

    return {
      icon: <AlertCircle size={20} />,
      label: 'Unknown',
      className: 'unknown',
      description: 'Unable to determine threat status'
    };
  };

  // Format file size
  const formatFileSize = (bytes: number): string => {
    if (bytes < 1024) return `${bytes} B`;
    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(2)} KB`;
    return `${(bytes / (1024 * 1024)).toFixed(2)} MB`;
  };

  // Pagination for samples
  const [samplePage, setSamplePage] = useState(0);
  const samplesPerPage = 3;
  const samples: Sample[] = details?.samples || [];
  const totalPages = Math.ceil(samples.length / samplesPerPage);
  const paginatedSamples = samples.slice(
    samplePage * samplesPerPage,
    (samplePage + 1) * samplesPerPage
  );

  const statusInfo = getStatusInfo();

  return (
    <div className="malwarebazaar-result-card">
      {/* Header */}
      <div className="malwarebazaar-header">
        <div className="malwarebazaar-header-left">
          <div
            className={`malwarebazaar-score-circle ${found ? 'malicious' : 'clean'}`}
          >
            <div className="malwarebazaar-score-value">{totalSamples}</div>
            <div className="malwarebazaar-score-label-small">Samples</div>
          </div>
          <div className="malwarebazaar-score-info">
            <div className="malwarebazaar-score-title">Malware Analysis</div>
            <div className="malwarebazaar-score-breakdown">
              <span className="malwarebazaar-signatures">{uniqueSignatures.length} Signatures</span>
              <span className="malwarebazaar-tags">{tags.length} Tags</span>
            </div>
          </div>
        </div>

        <div className="malwarebazaar-header-right">
          <div className="malwarebazaar-ioc-info">
            <div className="malwarebazaar-ioc-value">{result.ioc.value}</div>
            <div className="malwarebazaar-ioc-type">{result.ioc.type.toUpperCase()}</div>
          </div>
        </div>

        <div className="malwarebazaar-header-actions">
          <div className={`malwarebazaar-status-badge ${statusInfo.className}`}>
            {statusInfo.icon}
            <span>{statusInfo.label}</span>
          </div>
        </div>
      </div>

      {/* Status Description */}
      <div className={`malwarebazaar-status-description ${statusInfo.className}`}>
        <AlertCircle size={16} />
        {statusInfo.description}
      </div>

      {/* Unsupported IOC Type */}
      {result.unsupportedReason && result.supportedTypes && (
        <div className="malwarebazaar-unsupported">
          <div className="malwarebazaar-unsupported-message">
            <AlertTriangle size={16} />
            <span>{result.unsupportedReason}</span>
          </div>
          <div className="malwarebazaar-supported-types">
            <span className="malwarebazaar-supported-label">Supported IOC types:</span>
            <div className="malwarebazaar-supported-badges">
              {result.supportedTypes.map((type, idx) => (
                <span key={idx} className="malwarebazaar-ioc-badge">
                  {getIOCTypeLabel(type)}
                </span>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Only show tabs if malware was found */}
      {found && totalSamples > 0 && (
        <>
          {/* Tabs */}
          <div className="malwarebazaar-tabs">
            <button
              className={`malwarebazaar-tab ${activeTab === 'overview' ? 'active' : ''}`}
              onClick={() => setActiveTab('overview')}
            >
              <Info size={16} />
              Overview
            </button>
            <button
              className={`malwarebazaar-tab ${activeTab === 'samples' ? 'active' : ''}`}
              onClick={() => setActiveTab('samples')}
            >
              <FileText size={16} />
              Samples
              {samples.length > 0 && (
                <span className="malwarebazaar-tab-badge">{samples.length}</span>
              )}
            </button>
            <button
              className={`malwarebazaar-tab ${activeTab === 'details' ? 'active' : ''}`}
              onClick={() => setActiveTab('details')}
            >
              <Shield size={16} />
              Details
            </button>
          </div>

          {/* Tab Content */}
          {activeTab === 'overview' && (
            <div className="malwarebazaar-tab-content">
              <div className="malwarebazaar-overview-grid">
                {/* Threat Metrics */}
                <div className="malwarebazaar-metric-card">
                  <div className="malwarebazaar-metric-header">
                    <AlertCircle size={18} />
                    <span>Threat Metrics</span>
                  </div>
                  <div className="malwarebazaar-metric-body">
                    <div className="malwarebazaar-metric-item">
                      <span className="malwarebazaar-metric-label">Total Samples:</span>
                      <span className="malwarebazaar-metric-value malicious">{totalSamples}</span>
                    </div>
                    <div className="malwarebazaar-metric-item">
                      <span className="malwarebazaar-metric-label">Unique Signatures:</span>
                      <span className="malwarebazaar-metric-value">{uniqueSignatures.length}</span>
                    </div>
                    {details?.firstSeen && (
                      <div className="malwarebazaar-metric-item">
                        <span className="malwarebazaar-metric-label">First Seen:</span>
                        <span className="malwarebazaar-metric-value">
                          {new Date(details.firstSeen).toLocaleDateString('en-US', {
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric'
                          })}
                        </span>
                      </div>
                    )}
                    {details?.lastSeen && (
                      <div className="malwarebazaar-metric-item">
                        <span className="malwarebazaar-metric-label">Last Seen:</span>
                        <span className="malwarebazaar-metric-value">
                          {new Date(details.lastSeen).toLocaleDateString('en-US', {
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric'
                          })}
                        </span>
                      </div>
                    )}
                  </div>
                </div>

                {/* Intelligence Data */}
                <div className="malwarebazaar-metric-card">
                  <div className="malwarebazaar-metric-header">
                    <Info size={18} />
                    <span>Intelligence</span>
                  </div>
                  <div className="malwarebazaar-metric-body">
                    <div className="malwarebazaar-metric-item">
                      <span className="malwarebazaar-metric-label">Total Downloads:</span>
                      <span className="malwarebazaar-metric-value">{details?.totalDownloads || 0}</span>
                    </div>
                    <div className="malwarebazaar-metric-item">
                      <span className="malwarebazaar-metric-label">Total Uploads:</span>
                      <span className="malwarebazaar-metric-value">{details?.totalUploads || 0}</span>
                    </div>
                    <div className="malwarebazaar-metric-item">
                      <span className="malwarebazaar-metric-label">Code Signing:</span>
                      <span className={`malwarebazaar-metric-value ${details?.hasCodeSigning ? 'warning' : ''}`}>
                        {details?.hasCodeSigning ? 'Present' : 'None'}
                      </span>
                    </div>
                    <div className="malwarebazaar-metric-item">
                      <span className="malwarebazaar-metric-label">File Types:</span>
                      <span className="malwarebazaar-metric-value">{details?.fileTypes?.length || 0}</span>
                    </div>
                  </div>
                </div>

                {/* Malware Signatures */}
                {uniqueSignatures.length > 0 && (
                  <div className="malwarebazaar-metric-card full-width">
                    <div className="malwarebazaar-metric-header">
                      <Shield size={18} />
                      <span>Malware Signatures</span>
                    </div>
                    <div className="malwarebazaar-signatures">
                      {uniqueSignatures.map((signature: string, index: number) => (
                        <span key={index} className="malwarebazaar-signature">
                          <AlertTriangle size={14} />
                          {signature}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                {/* Malware Tags */}
                {tags.length > 0 && (
                  <div className="malwarebazaar-metric-card full-width">
                    <div className="malwarebazaar-metric-header">
                      <Tag size={18} />
                      <span>Malware Tags</span>
                    </div>
                    <div className="malwarebazaar-tags">
                      {tags.map((tag: string, index: number) => (
                        <span key={index} className="malwarebazaar-tag">
                          {tag}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}

          {activeTab === 'samples' && (
            <div className="malwarebazaar-tab-content">
              {samples.length > 0 ? (
                <>
                  <div className="malwarebazaar-samples-list">
                    {paginatedSamples.map((sample, index) => (
                      <div key={index} className="malwarebazaar-sample-item">
                        <div className="malwarebazaar-sample-header">
                          <div className="malwarebazaar-sample-title">
                            <FileText size={16} />
                            {sample.fileName}
                          </div>
                          {sample.signature && (
                            <div className="malwarebazaar-sample-signature">
                              <Shield size={14} />
                              {sample.signature}
                            </div>
                          )}
                        </div>

                        <div className="malwarebazaar-sample-info">
                          <div className="malwarebazaar-sample-meta">
                            <span className="malwarebazaar-sample-meta-item">
                              <strong>Type:</strong> {sample.fileType}
                            </span>
                            <span className="malwarebazaar-sample-meta-item">
                              <strong>Size:</strong> {formatFileSize(sample.fileSize)}
                            </span>
                            <span className="malwarebazaar-sample-meta-item">
                              <strong>Reporter:</strong> {sample.reporter}
                            </span>
                          </div>

                          {sample.deliveryMethod && (
                            <div className="malwarebazaar-sample-delivery">
                              <Download size={14} />
                              <strong>Delivery:</strong>
                              <span>{sample.deliveryMethodLabel}</span>
                            </div>
                          )}

                          {sample.originCountry && (
                            <div className="malwarebazaar-sample-country">
                              <Globe size={14} />
                              <strong>Origin:</strong>
                              <span>{sample.originCountry}</span>
                            </div>
                          )}

                          <div className="malwarebazaar-sample-dates">
                            <span className="malwarebazaar-sample-date">
                              <Clock size={14} />
                              First: {new Date(sample.firstSeen).toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric'
                              })}
                            </span>
                            <span className="malwarebazaar-sample-date">
                              <Clock size={14} />
                              Last: {new Date(sample.lastSeen).toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric'
                              })}
                            </span>
                          </div>

                          {sample.tags && sample.tags.length > 0 && (
                            <div className="malwarebazaar-sample-tags">
                              {sample.tags.slice(0, 5).map((tag, idx) => (
                                <span key={idx} className="malwarebazaar-sample-tag">
                                  <Tag size={12} />
                                  {tag}
                                </span>
                              ))}
                            </div>
                          )}

                          {sample.intelligence && (
                            <div className="malwarebazaar-sample-intelligence">
                              <div className="malwarebazaar-intelligence-item">
                                <Download size={14} />
                                <span>{sample.intelligence.downloads} downloads</span>
                              </div>
                              <div className="malwarebazaar-intelligence-item">
                                <Upload size={14} />
                                <span>{sample.intelligence.uploads} uploads</span>
                              </div>
                            </div>
                          )}

                          {sample.codeSign && sample.codeSign.length > 0 && (
                            <div className="malwarebazaar-sample-codesign">
                              <Award size={14} />
                              <span>Code Signed by {sample.codeSign[0].subject_cn}</span>
                            </div>
                          )}

                          {sample.comment && (
                            <div className="malwarebazaar-sample-comment">
                              {sample.comment}
                            </div>
                          )}
                        </div>

                        <div className="malwarebazaar-sample-hashes">
                          <div className="malwarebazaar-hash-item">
                            <span className="malwarebazaar-hash-label">MD5:</span>
                            <span className="malwarebazaar-hash-value">{sample.md5}</span>
                          </div>
                          <div className="malwarebazaar-hash-item">
                            <span className="malwarebazaar-hash-label">SHA1:</span>
                            <span className="malwarebazaar-hash-value">{sample.sha1}</span>
                          </div>
                          <div className="malwarebazaar-hash-item">
                            <span className="malwarebazaar-hash-label">SHA256:</span>
                            <span className="malwarebazaar-hash-value">{sample.sha256}</span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>

                  {/* Pagination */}
                  {totalPages > 1 && (
                    <div className="malwarebazaar-pagination">
                      <button
                        className="malwarebazaar-page-btn"
                        onClick={() => setSamplePage(Math.max(0, samplePage - 1))}
                        disabled={samplePage === 0}
                      >
                        Previous
                      </button>
                      <span className="malwarebazaar-page-info">
                        Page {samplePage + 1} of {totalPages}
                      </span>
                      <button
                        className="malwarebazaar-page-btn"
                        onClick={() => setSamplePage(Math.min(totalPages - 1, samplePage + 1))}
                        disabled={samplePage === totalPages - 1}
                      >
                        Next
                      </button>
                    </div>
                  )}
                </>
              ) : (
                <div className="malwarebazaar-no-samples">
                  <CheckCircle size={32} />
                  <p>No sample details available</p>
                </div>
              )}
            </div>
          )}

          {activeTab === 'details' && (
            <div className="malwarebazaar-tab-content">
              <div className="malwarebazaar-details-grid">
                {/* File Types */}
                {details?.fileTypes && details.fileTypes.length > 0 && (
                  <div className="malwarebazaar-detail-section">
                    <div className="malwarebazaar-detail-header">
                      <FileText size={16} />
                      File Types
                    </div>
                    <div className="malwarebazaar-file-types">
                      {details.fileTypes.map((type: string, index: number) => (
                        <span key={index} className="malwarebazaar-file-type">
                          {type}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                {/* Summary Statistics */}
                <div className="malwarebazaar-detail-section">
                  <div className="malwarebazaar-detail-header">
                    <Info size={16} />
                    Summary
                  </div>
                  <div className="malwarebazaar-detail-items">
                    <div className="malwarebazaar-detail-item">
                      <span className="malwarebazaar-detail-label">Total Samples:</span>
                      <span className="malwarebazaar-detail-value">{totalSamples}</span>
                    </div>
                    <div className="malwarebazaar-detail-item">
                      <span className="malwarebazaar-detail-label">Signatures:</span>
                      <span className="malwarebazaar-detail-value">{uniqueSignatures.length}</span>
                    </div>
                    <div className="malwarebazaar-detail-item">
                      <span className="malwarebazaar-detail-label">Tags:</span>
                      <span className="malwarebazaar-detail-value">{tags.length}</span>
                    </div>
                    <div className="malwarebazaar-detail-item">
                      <span className="malwarebazaar-detail-label">File Types:</span>
                      <span className="malwarebazaar-detail-value">{details?.fileTypes?.length || 0}</span>
                    </div>
                  </div>
                </div>
              </div>

              {/* View on MalwareBazaar Link */}
              <div className="malwarebazaar-external-link">
                <a
                  href={`https://bazaar.abuse.ch/browse.php?search=hash:${result.ioc.value}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="malwarebazaar-link-button"
                >
                  View Full Report on MalwareBazaar →
                </a>
              </div>
            </div>
          )}
        </>
      )}

      {/* If not found, show external link at bottom */}
      {!found && (
        <div className="malwarebazaar-external-link">
          <a
            href={`https://bazaar.abuse.ch/browse.php?search=hash:${result.ioc.value}`}
            target="_blank"
            rel="noopener noreferrer"
            className="malwarebazaar-link-button"
          >
            Check on MalwareBazaar →
          </a>
        </div>
      )}
    </div>
  );
};
